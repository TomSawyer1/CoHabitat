import { Platform } from 'react-native';

// Configuration centralis√©e pour l'API GuardConnect
let API_BASE_URL = process.env.EXPO_PUBLIC_API_BASE_URL;

if (!API_BASE_URL) {
  console.warn('‚ö†Ô∏è EXPO_PUBLIC_API_BASE_URL non d√©finie dans .env');
  console.warn('üí° Configurez votre .env selon votre mode :');
  console.warn('üì± Expo Go ‚Üí localhost:3000');
  console.warn('ü§ñ Android √©mulateur ‚Üí 10.0.2.2:3000');
  console.warn('üçé iOS simulateur ‚Üí localhost:3000');
  
  // Valeurs par d√©faut selon la plateforme
  if (Platform.OS === 'android') {
    API_BASE_URL = 'http://10.0.2.2:3000';
    console.log('ü§ñ Mode par d√©faut : Android √©mulateur');
  } else {
    API_BASE_URL = 'http://localhost:3000';
    console.log('üçé Mode par d√©faut : iOS/Expo Go');
  }
} else {
  // D√©terminer le mode selon l'URL configur√©e
  if (API_BASE_URL.includes('10.0.2.2')) {
    console.log('ü§ñ Mode configur√© : Android √âmulateur');
  } else if (API_BASE_URL.includes('localhost')) {
    console.log('üì± Mode configur√© : Expo Go / iOS Simulateur');
  } else {
    console.log('üåê Mode configur√© : URL personnalis√©e');
  }
}

// Validation de l'URL
if (!API_BASE_URL.startsWith('http')) {
  console.error('‚ùå URL API invalide:', API_BASE_URL);
  throw new Error('URL API invalide dans la configuration');
}

// Log final
console.log(`üîó API : ${API_BASE_URL}`);
console.log(`üì± Plateforme : ${Platform.OS}`);

const BACKEND_PORT = process.env.BACKEND_PORT || '3000';

export {
  API_BASE_URL,
  BACKEND_PORT
};

// Fonction utilitaire pour debug
export const getApiConfig = () => {
  return {
    url: API_BASE_URL!,
    platform: Platform.OS,
    mode: API_BASE_URL!.includes('10.0.2.2') ? 'Android √âmulateur' : 
          API_BASE_URL!.includes('localhost') ? 'Expo Go / iOS' : 'Personnalis√©'
  };
};

// Ajoute d'autres constantes ou objets de configuration ici 